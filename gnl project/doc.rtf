{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red27\green29\blue31;\red255\green255\blue255;\red235\green236\blue237;
\red27\green29\blue31;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c14118\c15294\c16078;\cssrgb\c100000\c100000\c100000;\cssrgb\c93725\c94118\c94510;
\cssrgb\c14118\c15294\c16078;\cssrgb\c100000\c100000\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh15100\viewkind0
\deftab720
\pard\pardeftab720\sl480\sa380\partightenfactor0

\f0\fs38 \cf2 \cb3 \expnd0\expndtw0\kerning0
#####1\
Generic functions\
\pard\pardeftab720\sl340\sa300\partightenfactor0

\fs30 \cf2 \cb3 Generic\
(not the compile-time polymorphism mechanism)\
A generic function is a function that has been designed for various use cases\'a0
\b out of any context
\b0 \'a0and does not provide benefits to be made more generic without undesirable performance losses. They must be reusable in any program and in various contexts within the same program. Most of the time, these functions were first specific functions that have been rewritten to be generic.\
A key-point of a generic function is that the treatment done should be the same no matter the input provided. Conditions over input are prohibited.\
In other words, the use of the function, the way it is designed, is because what it does can be useful (and work) in many situations, works on every applicable data, and does not harm the performances.
\fs38 \

\fs30 Specific\
A specific function has been designed for one or many dedicated tasks, it may be improved to a more generic usage. It won't work out of the contexts it has been conceived for. A specific function can be incorrectly considered as a generic function when it is so simple that it looks generic, but in fact it would be very dependent of the goal of the caller.\
Example of a specific function which can be confused with a generic function would be a function to double every numbers in a list. It can work with any program, but it's to restrictive and could be improved without significant performance loss. It can be made more generic: multiply by N every numbers in a list... apply an operation F on every numbers in the list (generic operations)... apply an operation F on every items in the list (generic data type)...
\fs38 \

\fs30 Use-case\
Free a 2-dimensional array look like a good candidate to be generic (2d arrays are quite frequent), yet it can be made more generic. However, does the N-dimensional array would be very useful ? 3d arrays are pretty common, but the 4d, 5d, 6d, ... arrays are quite rare. From this, it is tolerable to consider the functions\'a0
\f1\fs26 \cb4 free_2d_array
\f0\fs30 \cb3 \'a0and\'a0
\f1\fs26 \cb4 free_3d_array
\f0\fs30 \cb3 \'a0as generic even if they are bit specific.\cf5 \cb6 \outl0\strokewidth0 \strokec5 \
\pard\pardeftab720\sl480\sa380\partightenfactor0

\fs38 \cf2 \cb3 \outl0\strokewidth0 #####2\
\pard\pardeftab720\sl340\sa300\partightenfactor0

\fs30 \cf2 Generic\
(not the compile-time polymorphism mechanism)\
A generic function is a function that has been designed for various use cases\'a0
\b out of any context
\b0 \'a0and does not provide benefits to be made more generic without undesirable performance losses. They must be reusable in any program and in various contexts within the same program. Most of the time, these functions were first specific functions that have been rewritten to be generic.\
A key-point of a generic function is that the treatment done should be the same no matter the input provided. Conditions over input are prohibited.\
In other words, the use of the function, the way it is designed, is because what it does can be useful (and work) in many situations, works on every applicable data, and does not harm the performances.
\fs38 \cf2 \cb3 \
\pard\pardeftab720\sl340\sa300\partightenfactor0

\fs30 \cf2 Specific\
A specific function has been designed for one or many dedicated tasks, it may be improved to a more generic usage. It won't work out of the contexts it has been conceived for. A specific function can be incorrectly considered as a generic function when it is so simple that it looks generic, but in fact it would be very dependent of the goal of the caller.\
Example of a specific function which can be confused with a generic function would be a function to double every numbers in a list. It can work with any program, but it's to restrictive and could be improved without significant performance loss. It can be made more generic: multiply by N every numbers in a list... apply an operation F on every numbers in the list (generic operations)... apply an operation F on every items in the list (generic data type)...
\fs38 \

\fs30 Use-case\
Free a 2-dimensional array look like a good candidate to be generic (2d arrays are quite frequent), yet it can be made more generic. However, does the N-dimensional array would be very useful ? 3d arrays are pretty common, but the 4d, 5d, 6d, ... arrays are quite rare. From this, it is tolerable to consider the functions\'a0
\f1\fs26 \cf2 \cb4 free_2d_array
\f0\fs30 \cf2 \cb3 \'a0and\'a0
\f1\fs26 \cf2 \cb4 free_3d_array
\f0\fs30 \cf2 \cb3 \'a0as generic even if they are bit specific.\
\pard\pardeftab720\sl480\sa380\partightenfactor0

\fs38 \cf2 \cb3 #####3\

\fs30 Generic\
\pard\pardeftab720\sl340\sa300\partightenfactor0
\cf2 (not the compile-time polymorphism mechanism)\
A generic function is a function that has been designed for various use cases\'a0
\b out of any context
\b0 \'a0and does not provide benefits to be made more generic without undesirable performance losses. They must be reusable in any program and in various contexts within the same program. Most of the time, these functions were first specific functions that have been rewritten to be generic.\
A key-point of a generic function is that the treatment done should be the same no matter the input provided. Conditions over input are prohibited.\
In other words, the use of the function, the way it is designed, is because what it does can be useful (and work) in many situations, works on every applicable data, and does not harm the performances.
\fs38 \cf2 \cb3 \

\fs30 \cf2 \cb3 Specific\
A specific function has been designed for one or many dedicated tasks, it may be improved to a more generic usage. It won't work out of the contexts it has been conceived for. A specific function can be incorrectly considered as a generic function when it is so simple that it looks generic, but in fact it would be very dependent of the goal of the caller.\
Example of a specific function which can be confused with a generic function would be a function to double every numbers in a list. It can work with any program, but it's to restrictive and could be improved without significant performance loss. It can be made more generic: multiply by N every numbers in a list... apply an operation F on every numbers in the list (generic operations)... apply an operation F on every items in the list (generic data type)...
\fs38 \cf2 \cb3 \

\fs30 \cf2 \cb3 Use-case\
Free a 2-dimensional array look like a good candidate to be generic (2d arrays are quite frequent), yet it can be made more generic. However, does the N-dimensional array would be very useful ? 3d arrays are pretty common, but the 4d, 5d, 6d, ... arrays are quite rare. From this, it is tolerable to consider the functions\'a0
\f1\fs26 \cf2 \cb4 free_2d_array
\f0\fs30 \cf2 \cb3 \'a0and\'a0
\f1\fs26 \cf2 \cb4 free_3d_array
\f0\fs30 \cf2 \cb3 \'a0as generic even if they are bit specific.\cf5 \cb6 \outl0\strokewidth0 \strokec5 \
}