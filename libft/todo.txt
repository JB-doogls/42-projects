		
		|| LIBFT: check-list ||

				Part I
						Done
	• memset 
	• bzero 
	• memcpy   
	• memccpy  
	• memmove	
	• memchr    	
	• memcmp

 	• strlen 	
	• strdup    
	• strcpy    	
	• strncpy    	
	• strcat 	  
	• strncat    	
	• strlcat    	
	• strchr    	
	• strrchr   	
	• strstr    	
	• strnstr   	 
	• strcmp    	
	• strncmp 

	• atoi    
	• isalpha
	• isdigit    	
	• isalnum    	
	• isascii    	
	• isprint  
	• toupper
	• tolower
			
			
				Part II

	ft_itoa
	ft_memalloc
	ft_memdel

	ft_putchar
	ft_putchar_fd
	ft_putendl
	ft_putendl_fd
	ft_putnbr
	ft_putnbr_fd
	ft_putstr
	ft_putstr_fd

	ft_strsplit
	ft_strclr 
	
	ft_strequ
	ft_striter
	ft_striteri
	ft_strjoin
	ft_strmap
	ft_strmapi
	ft_strnequ

	ft_strnew
	ft_strdel 

	 
	ft_strsub
	ft_strtrim




						Part II


	t_list				*ft_lstnew(void const *content, size_t content_size);
	void				ft_lstdel(t_list **alst, void (*del)(void *, size_t));
	void				ft_lstdelone(t_list **alst, void (*del)(void *, size_t));
	void				ft_lstadd(t_list **alst, t_list *new);
	void				ft_lstiter(t_list *lst, void (*f)(t_list *elem));
	t_list				*ft_lstmap(t_list *lst, t_list *(*f)(t_list *elem));	


		CHECK_YOUR)SELF
	
	• все указатели (*ptr) во ВСЕХ функциях ч.2,ч.3 на NULL
	• проверка на то, что оба аргумента NULL в функциях 
			ft_memove, ft_memcpy, ft_memccpy. ft_memcpy*.
	
	• Переполнение size_t -> выделение недостаточного объема памяти, 
		и segmentation fault (ft_strnew)

	• Утечки памяти: вся выделенная malloc память либо:
		- free
		- возвращаем из функции  *ptr (указатель на выделенную память)  
	
	• Алогичные примеры 
		- ft_atoi проверить на "−9223372036854775828", "−9223372036854775028", 
		"9223372036854775828", "9223372036854775808" (long int для переменной)